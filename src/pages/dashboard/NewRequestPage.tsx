import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { ArrowRight, FileText, AlertTriangle, CheckCircle, Loader2 } from 'lucide-react';
import { z } from 'zod';

const requestSchema = z.object({
  title: z.string()
    .min(5, 'العنوان يجب أن يكون 5 أحرف على الأقل')
    .max(200, 'العنوان يجب أن يكون أقل من 200 حرف'),
  case_type: z.string().min(1, 'يرجى اختيار نوع القضية'),
  description: z.string()
    .min(20, 'الوصف يجب أن يكون 20 حرف على الأقل')
    .max(5000, 'الوصف يجب أن يكون أقل من 5000 حرف'),
  priority: z.number().min(1).max(5),
});

type RequestFormData = z.infer<typeof requestSchema>;

const NewRequestPage = () => {
  const [formData, setFormData] = useState<RequestFormData>({
    title: '',
    case_type: '',
    description: '',
    priority: 3,
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const navigate = useNavigate();
  const { toast } = useToast();

  const handleInputChange = (field: keyof RequestFormData, value: string | number) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = (): boolean => {
    try {
      requestSchema.parse(formData);
      setErrors({});
      return true;
    } catch (error) {
      if (error instanceof z.ZodError) {
        const fieldErrors: Record<string, string> = {};
        error.issues.forEach((issue) => {
          if (issue.path[0]) {
            fieldErrors[issue.path[0].toString()] = issue.message;
          }
        });
        setErrors(fieldErrors);
      }
      return false;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast({
        title: "خطأ في البيانات",
        description: "يرجى تصحيح الأخطاء أولاً",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsSubmitting(true);
      
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        throw new Error('يجب تسجيل الدخول أولاً');
      }

      const { data, error } = await supabase
        .from('cases')
        .insert({
          client_id: session.user.id,
          title: formData.title,
          case_type: formData.case_type as 'property' | 'divorce' | 'custody' | 'domestic_violence' | 'inheritance' | 'employment' | 'other',
          description: formData.description,
          priority: formData.priority,
          status: 'initial',
          case_number: '' // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "تم إنشاء الطلب بنجاح",
        description: `رقم الطلب: ${data.case_number}`,
      });

      navigate('/dashboard/requests');
    } catch (error: any) {
      console.error('Error creating request:', error);
      toast({
        title: "خطأ في إنشاء الطلب",
        description: error.message || "حدث خطأ غير متوقع",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const caseTypes = [
    { value: 'property', label: 'قضايا أملاك' },
    { value: 'divorce', label: 'قضايا طلاق' },
    { value: 'custody', label: 'قضايا حضانة' },
    { value: 'domestic_violence', label: 'قضايا عنف أسري' },
    { value: 'inheritance', label: 'قضايا ميراث' },
    { value: 'employment', label: 'قضايا عمالية' },
    { value: 'other', label: 'أخرى' }
  ];

  const priorities = [
    { value: 1, label: 'عاجل جداً' },
    { value: 2, label: 'عاجل' },
    { value: 3, label: 'عادي' },
    { value: 4, label: 'منخفض' },
    { value: 5, label: 'منخفض جداً' }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button
          variant="ghost" 
          onClick={() => navigate('/dashboard/requests')}
          className="gap-2"
        >
          <ArrowRight className="w-4 h-4" />
          العودة للطلبات
        </Button>
      </div>
      
      <div>
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <FileText className="w-8 h-8 text-primary" />
          طلب جديد
        </h1>
        <p className="text-muted-foreground">أنشئي طلب استشارة قانونية جديد</p>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        {/* Form */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>تفاصيل الطلب</CardTitle>
              <CardDescription>
                املئي النموذج أدناه لإنشاء طلب استشارة قانونية
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Title */}
                <div className="space-y-2">
                  <Label htmlFor="title">عنوان الطلب *</Label>
                  <Input
                    id="title"
                    type="text"
                    placeholder="مثال: استشارة حول عقد عمل"
                    value={formData.title}
                    onChange={(e) => handleInputChange('title', e.target.value)}
                    className={errors.title ? 'border-destructive' : ''}
                  />
                  {errors.title && (
                    <p className="text-sm text-destructive flex items-center gap-1">
                      <AlertTriangle className="w-4 h-4" />
                      {errors.title}
                    </p>
                  )}
                </div>

                {/* Case Type */}
                <div className="space-y-2">
                  <Label htmlFor="case_type">نوع القضية *</Label>
                  <Select 
                    value={formData.case_type} 
                    onValueChange={(value) => handleInputChange('case_type', value)}
                  >
                    <SelectTrigger className={errors.case_type ? 'border-destructive' : ''}>
                      <SelectValue placeholder="اختر نوع القضية" />
                    </SelectTrigger>
                    <SelectContent>
                      {caseTypes.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {errors.case_type && (
                    <p className="text-sm text-destructive flex items-center gap-1">
                      <AlertTriangle className="w-4 h-4" />
                      {errors.case_type}
                    </p>
                  )}
                </div>

                {/* Priority */}
                <div className="space-y-2">
                  <Label htmlFor="priority">الأولوية</Label>
                  <Select 
                    value={formData.priority.toString()} 
                    onValueChange={(value) => handleInputChange('priority', parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {priorities.map((priority) => (
                        <SelectItem key={priority.value} value={priority.value.toString()}>
                          {priority.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Description */}
                <div className="space-y-2">
                  <Label htmlFor="description">وصف المشكلة *</Label>
                  <Textarea
                    id="description"
                    placeholder="اشرحي تفاصيل المشكلة أو الموضوع الذي تحتاجين استشارة قانونية بشأنه..."
                    rows={6}
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className={errors.description ? 'border-destructive' : ''}
                  />
                  <div className="flex justify-between items-center">
                    {errors.description ? (
                      <p className="text-sm text-destructive flex items-center gap-1">
                        <AlertTriangle className="w-4 h-4" />
                        {errors.description}
                      </p>
                    ) : (
                      <p className="text-sm text-muted-foreground">
                        {formData.description.length}/5000 حرف
                      </p>
                    )}
                  </div>
                </div>

                {/* Submit Buttons */}
                <div className="flex gap-4 pt-6">
                  <Button type="submit" disabled={isSubmitting} className="gap-2">
                    {isSubmitting ? (
                      <Loader2 className="w-4 h-4 animate-spin" />
                    ) : (
                      <CheckCircle className="w-4 h-4" />
                    )}
                    {isSubmitting ? 'جاري الإرسال...' : 'إرسال الطلب'}
                  </Button>
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => navigate('/dashboard/requests')}
                    disabled={isSubmitting}
                  >
                    إلغاء
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>

        {/* Guidelines */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertTriangle className="w-5 h-5 text-primary" />
                إرشادات مهمة
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 className="font-medium mb-2">لطلب فعال:</h4>
                <ul className="text-sm text-muted-foreground space-y-1">
                  <li>• اكتبي عنواناً واضحاً ومحدداً</li>
                  <li>• اختاري نوع القضية المناسب</li>
                  <li>• قدمي تفاصيل كاملة ودقيقة</li>
                  <li>• اذكري التواريخ المهمة</li>
                </ul>
              </div>
              
              <div>
                <h4 className="font-medium mb-2">معلومات مفيدة:</h4>
                <ul className="text-sm text-muted-foreground space-y-1">
                  <li>• الأسماء الكاملة للأطراف</li>
                  <li>• أرقام المستندات</li>
                  <li>• المبالغ المالية (إن وجدت)</li>
                  <li>• المواقع والعناوين</li>
                </ul>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>ماذا بعد الإرسال؟</CardTitle>
            </CardHeader>
            <CardContent>
              <ol className="text-sm text-muted-foreground space-y-2">
                <li>1. سيتم مراجعة طلبك خلال 24 ساعة</li>
                <li>2. ستصلك رسالة تأكيد برقم الطلب</li>
                <li>3. سيتم تعيين محامية متخصصة</li>
                <li>4. ستصلك إشعارات بالتحديثات</li>
              </ol>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default NewRequestPage;